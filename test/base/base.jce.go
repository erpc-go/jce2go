// DO NOT EDIT IT.
// code generated by jce2go v1.0.
// source: base.jce

// model ts
package base

import (
	"fmt"
	"io"

	"github.com/erpc-go/jce-codec"
)

// 占位使用，避免导入的这些包没有被使用
var _ = fmt.Errorf
var _ = io.ReadFull
var _ = jce.Int1

// mm
// mmo
type EMsgSendType int32

// mm
// mmoo
/*dmm*/
const (
	// ooo
	EMsgSendTypeHhh             EMsgSendType = 0   // mmm  // oo
	EMsgSendTypeESendTypeOnline EMsgSendType = 199 // test
	// jjjj;
	EMsgSendTypeESendTypeOffline EMsgSendType = 88 //ooo
	// oomm
	/*
	   sdf
	   wer
	   asdf
	*/
)

const (
	// const co
	ERPC_VERSION int16 = 0x01 // hhhh
	TUP_VERSION  int32 = 0x03 // mm
	// lll
	Jj string = "tet" // owd
)

// test
type Request struct {
}

func (st *Request) resetDefault() {
}

// ReadFrom reads from io.Reader and put into struct.
func (st *Request) ReadFrom(r io.Reader) (n int64, err error) {
	var (
		have bool
		ty   jce.JceEncodeType
	)

	decoder := jce.NewDecoder(r)
	st.resetDefault()

	if err = decoder.ReadStructBegin(); err != nil {
		return
	}

	if err = decoder.ReadStructEnd(); err != nil {
		return
	}

	_ = err
	_ = have
	_ = ty
	return
}

// WriteTo encode struct to io.Writer
func (st *Request) WriteTo(w io.Writer) (n int64, err error) {
	encoder := jce.NewEncoder(w)
	st.resetDefault()

	if err = encoder.WriteStructBegin(); err != nil {
		return
	}

	if err = encoder.WriteStructEnd(); err != nil {
		return
	}

	// flush to io.Writer
	err = encoder.Flush()
	return
}
